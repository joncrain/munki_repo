<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>RestartAction</key>
	<string>None</string>
	<key>_metadata</key>
	<dict>
		<key>created_by</key>
		<string>runner</string>
		<key>creation_date</key>
		<date>2023-05-02T18:35:14Z</date>
		<key>munki_version</key>
		<string>6.2.1.4545</string>
		<key>os_version</key>
		<string>12.6.5</string>
	</dict>
	<key>autoremove</key>
	<false/>
	<key>blocking_applications</key>
	<array>
		<string></string>
	</array>
	<key>catalogs</key>
	<array>
		<string>test</string>
	</array>
	<key>category</key>
	<string>System</string>
	<key>description</key>
	<string>Crypt is a Filevault 2 Escrow solution.</string>
	<key>developer</key>
	<string>Graham Gilbert</string>
	<key>display_name</key>
	<string>Crypt FileVault Escrow</string>
	<key>installcheck_script</key>
	<string>#!/usr/local/munki/munki-python

'''This installcheck script template evaluates the installed version
of Crypt as well as if Crypt is included properly in the authdb.'''

from subprocess import check_output
from distutils.version import StrictVersion
import plistlib
import os

def get_mechs():
    '''returns a list of all current authdb mechs'''
    cmd = ["/usr/bin/security", "authorizationdb", "read", "system.login.console"]
    cur_mech_plist = plistlib.loads(check_output(cmd))
    mechs_only = cur_mech_plist['mechanisms']
    return mechs_only

def get_crypt_vers():
    '''returns the installed version of the Crypt bundle'''
    try:
        f = open("/Library/Security/SecurityAgentPlugins/Crypt.bundle/Contents/Info.plist", 'rb')
    except:
        print("Unable to open Crypt bundle to get version")
        exit(0)
    try:
        plist = plistlib.load(f)
    except:
        print("Unable to get plist info from Crypt bundle")
        exit(0)
    f.close()
    return plist["CFBundleShortVersionString"]

def main():
    '''Checks if Crypt is properly installed and up to date. Note that the version var
    below is auto-substituted by AutoPkg - if you are adding this installcheck manually,
    be sure to insert the proper version number.'''

    pkg_vers = '4.1'

    install_items = ['/Library/Security/SecurityAgentPlugins/Crypt.bundle',
                     '/Library/LaunchDaemons/com.grahamgilbert.crypt.plist',
                     '/Library/Crypt/checkin',
                     '/Library/Crypt/python',
                     '/Library/Crypt/Python.framework',
                     '/Library/Security/SecurityAgentPlugins/Crypt.bundle']
    for item in install_items:
        if not os.path.exists(item):
            # we are missing a needed file - Crypt is damaged or not installed
            exit(0)

    # check if Crypt is up to date
    installed_vers = get_crypt_vers()
    if StrictVersion(installed_vers) &lt; StrictVersion(pkg_vers):
        # we are out of date compared to the pkg version
        exit(0)

    mechs = ['Crypt:Check,privileged', 'Crypt:CryptGUI', 'Crypt:Enablement,privileged']
    current_mechs = get_mechs()
    for crypt_mech in mechs:
        if not crypt_mech in current_mechs:
            # mechs are not in place
            exit(0)

    # all mechs in place and version is up to date
    exit(1)

if __name__ == "__main__":
    main()
</string>
	<key>installed_size</key>
	<integer>145896</integer>
	<key>installer_item_hash</key>
	<string>ef6b31c509378343902567266c6dad19e5d17fe56bc6ec48d6e9da4817d43fda</string>
	<key>installer_item_location</key>
	<string>Crypt2-4.1.227.pkg</string>
	<key>installer_item_size</key>
	<integer>40962</integer>
	<key>minimum_os_version</key>
	<string>10.14</string>
	<key>name</key>
	<string>crypt2</string>
	<key>preuninstall_script</key>
	<string>#!/usr/local/munki/munki-python

# Copyright 2015 Crypt Project.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import  os,     \
        sys,     \
        plistlib,  \
        platform,   \
        subprocess
from    subprocess import Popen, \
                          PIPE,   \
                          STDOUT

## Path to system.login.console.plist
system_login_console_plist = "/private/var/tmp/system.login.console.plist"


## Mechs that support FV2AuthPlugin
fv2_mechs = ["Crypt:Check,privileged","Crypt:CryptGUI","Crypt:Enablement,privileged"]

def remove_mechs_in_db(db, mech_list):
    for mech in mech_list:
        for old_mech in filter(lambda x: mech in x, db['mechanisms']):
            db['mechanisms'].remove(old_mech)
    return db

def set_mechs_in_db(db, mech_list):
    ## Clear away any previous configs
    db = remove_mechs_in_db(db, mech_list)
    return db

def edit_authdb():
    ## Export "system.login.console"
    cmd = ["/usr/bin/security", "authorizationdb", "read", "system.login.console"]
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
        encoding='utf8')
    stdout, stderr = proc.communicate()
    # Even if the command succeeds, there may be an "error" of "YES (0)"
    if stderr and "YES (0)" not in stderr:
        sys.exit(f"\n{stderr}")
    system_login_console = stdout
    f_c = open(system_login_console_plist, 'w')
    f_c.write(system_login_console)
    f_c.close()

    ## Parse the plist
    try:
        plist_file = open(system_login_console_plist, 'r+b')
    except:
        sys.exit("\nCannot open system login console plist")
    try:
        plist_contents = plistlib.load(plist_file)
    except:
        sys.exit("\nCannot read contents of system login console plist")
    plist_contents = set_mechs_in_db(plist_contents, fv2_mechs)

    # Empty file before writing back to it
    plist_file.seek(0)
    plist_file.truncate()
    ## Write back the changes
    plistlib.dump(plist_contents, plist_file)
    plist_file.close()

    try:
        plist_file = open(system_login_console_plist, "r")
    except:
        sys.exit("\nUnable to open system login console plist to read changes")
    # Avoid str instead of bytes-like error messages
    lines = plist_file.readlines()
    plist_data = ''
    for line in lines:
        plist_data += line
    plist_data = plist_data.encode()
    proc = Popen(["/usr/bin/security", "authorizationdb", "write", "system.login.console"], stdout=PIPE, stdin=PIPE, stderr=PIPE)
    stdout_data = proc.communicate(input=plist_data)
    plist_file.close()

def check_root():
    if not os.geteuid() == 0:
        sys.exit("\nOnly root can run this script\n")

def main(argv):
    #check_root()
    edit_authdb()

if __name__ == '__main__':
    main(sys.argv)
</string>
	<key>receipts</key>
	<array>
		<dict>
			<key>installed_size</key>
			<integer>145896</integer>
			<key>packageid</key>
			<string>com.grahamgilbert.Crypt</string>
			<key>version</key>
			<string>4.1.227</string>
		</dict>
	</array>
	<key>unattended_install</key>
	<true/>
	<key>uninstall_method</key>
	<string>removepackages</string>
	<key>uninstallable</key>
	<true/>
	<key>version</key>
	<string>4.1.227</string>
</dict>
</plist>
